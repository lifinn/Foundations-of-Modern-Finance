---
title: "Price and Value"
author: "Finn Li"
date: "12/11/2021"
output: html_document
runtime: shiny
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(FinCal)
library(FinancialMath)
```

This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately. 

To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).

## 2-1 Future Values and Present Values

### 1 Calculating Future Values
Suppose you invest 100 in a bank account that pays interest of r = 7% a year. 
In the first year, you will earn interest of .07 × 100 = 7 and the value
of your investment will grow to 107:

```{r}
fv(.07, 1, -100)
annuity.level(pv=100, n=1, i=.07)
```

### 2 Calculating Present Values
We have seen that 100 invested for two years at 7% will g row to a future value of 
$100 × 1.07^2 = 114.49$. Let’s turn this around and ask how much you need to invest
today to produce 114.49 at the end of the second year.

```{r}
pv(.07, 2, fv=114.49)
annuity.level(fv=114.49, n=2, i=.07)
```

The cost of buying the land and constructing a building is 700,000. Your company
has cash in the bank to finance construction. Your real estate adviser predicts 
that you will be able to sell next year for 800,000.

To find its present value we discount that cash flow by the opportunity cost of capital:
```{r}
pv(.07, 1, fv=800000)
annuity.level(fv=800000, n=1, i=.07)
```

### 3 Net Present Value
Net present value equals present value minus the required investment
```{r}
npv(.07, c(-700000, 800000))
NPV(cf0=-700000, cf=c(800000), times = c(1), i=.07)
```

### 4 Risk and Present Value
Suppose you believe the project is as risky as investment in the stock market and that stocks are expected to provide a 12% return. Then 12% is the opportunity cost of capital for your project.
```{r}
pv(.12, 1, fv=800000)
npv(.12, c(-700000, 800000))

annuity.level(fv=800000, n=1, i=.12)
NPV(cf0=700000, cf=c(800000), times = c(1), i=.12)
NPV(cf0=700000, cf=c(30000, 870000), times = c(1, 2), i=.12)
```

### 5 Present Values and Rates of Return
The rate of return is simply the profit as a proportion of the initial outlay
```{r}
irr(c(-700000, 800000))
IRR(cf0=-700000, cf=c(800000), times=c(1))
```

## 2-2 Looking for Shortcuts—Perpetuities and Annuities

### 1 How to Value Perpetuities
The annual rate of return on a perpetuity is equal to the promised annual payment divided by the present value. We can twist it around and find the present value of a perpetuity given the discount rate $r$ and the cash payment $C$
$\textit{PV}=\frac{\textit{C}}{r}$, which can be checked by the present value formula
\begin{equation*}
\textit{PV} = \frac{\textit{C}}{1+r} + \frac{\textit{C}}{(1+r)^2} + \frac{\textit{C}}{(1+r)^3}
\end{equation*}
Now let $\frac{\textit{C}}{1+r} = a$ and $\frac{1}{ 1 + r } = x$. Then we have
\begin{equation*}
\textit{PV} = a(1+x+x^2+\cdots)
\end{equation*}
Multiplying both sides by x, we have
\begin{align*}
\textit{PV}x &= a(x+x^2+x^3+\cdots) \\
\textit{PV} - \textit{PV}x &= a + (ax+ax^2+ax^3+\cdots) - a(x+x^2+x^3+\cdots) \\
\textit{PV}(1-x) &= a
\end{align*}
Substituting for $a$ and $x$,
\begin{equation*}
\textit{PV}(1-\frac{1}{1+r}) = \frac{\textit{C}}{1+r}
\end{equation*}
Multiplying both sides by $1+r$ and rearranging gives
\begin{align*}
\textit{PV}(1+r) - \textit{PV} &= C \\
\textit{PV} + r \textit{PV} - \textit{PV} &= C \\
\textit{PV} = \frac{C}{r}
\end{align*}

You aim to provide 1 billion a year in perpetuity , starting next year. So, if the interest rate is 10%, you need to write a check today for
```{r}
pv.perpetuity(.1, 1)
perpetuity.level(pmt = 1, i=.1)
```

### 2 How to Value Annuities
1. An annuity is an asset that pays a fixed sum each year for a specified number of years. The equal-payment house mortgage or installment credit agreement are common examples of annuities.
Suppose that Tiburon Autos offers an “easy payment” scheme on a new Toyota of 5,000 a year, paid at the end of each of the next five years, with no cash down. What is the car really costing you?
```{r}
pv.annuity(.07, 5, -5000)
# 5 year annuity factor * payment
pv.annuity(.07, 5, 1) * -5000

annuity.level(n=5, pmt=5000, i=.07)
```

2. Suppose that you take out a four-year loan of 1,000. The bank requires you to repay the loan evenly over the four years. It must therefore set the four annual payments so that they have a present value of $1,000
```{r}
# PV / 4 year annuity factor = payment
1000/pv.annuity(.1, 4, -1)

annuity.level(pv=1000, n=4, i=.1)
```

3. Suppose that you take out a 250,000 house mortgage from your local savings bank when the interest rate is 12%. The bank requires you to repay  the mortgage in equal annual installments over the next 30 years.
```{r}
250000/pv.annuity(.12, 30, -1)

annuity.level(pv=250000, n=30, i=.12)
```

4. You could save 20,000 a year out of your income and earn a return of 8% on these savings. How much will you be able to spend after five years?
```{r}
fv.annuity(.08, 5, -20000)

annuity.level(n=5, pmt=20000, i=.08)
```

## 2-3 More Shortcuts - Growing Perpetuities and Annuities
A sum was to be paid in 30 annual installments. The payment in the first year was only 11.42 million, but it then increased each year by 5% so that the final payment was 47 million. The total amount paid out was 758.7 million, but the winner had to wait to get it. Suppose that the first pay ment occurs at the end of year 1, so that $C_1$= 11.42 million and the interest rate was 2.7%, what was that 758.7 prize really worth?
```{r}
pv.growing.annuity <- function(r, g, n, pmt, type = 0) 
{
    if (type != 0 && type != 1) {
        print("Error: type should be 0 or 1!")
    }
    else {
        pv = pmt/(r-g) * (1 - ((1 + g)^n/(1 + r)^n)) * (1 + r)^type * (-1)
        return(pv)
    }
}
pv.growing.annuity(.027, .05, 30, -11.42)

annuity.geo(n=30, p=11.42, k=.05, i=.027)
```

```{r}
# cf0 is the EE credit to me
# cf is the cash flow that I paid to EE
# times are the count of months
# i = 0 because there is no other interest for which I should pay
# npv = pv - cf0
# How much EE has lost for this transaction
NPV(cf0 = 1049+69*24, cf=c(55.2+50.01,rep(55.2, 23)), times = seq(1, 24), i=0)
# The paid amount of the cash flow
sum(c(55.2+50.01, rep(55.2, 23)))
# The PV of the cash flow given the 2.5% inflation rate
NPV(cf0 = 0, cf=c(55.2+50.01,rep(55.2, 23)), times = seq(1, 24), i=0.025/12)
```

## 2-4 How Interest Is Paid and Quoted

### 1 Continuous Compounding
1. Suppose you invest 1 at a continuously compounded rate of 11% ( r = .11 ) for one year ( t = 1 ) . The end year value is $e^.11$ , or 1.116. In other words, investing at 11% a year continuously compounded is exactly the same as investing at 11.6% a year annually compounded.
```{r}
# i is the compounded rate, return annually effective rate 
annuity.level(pv=1, n=1, i=.11, ic=365)
annuity.level(pv=1, n=1, i=log(1.10), ic=365)
```

2. After you have retired, you plan to spend 200,000 a year for 20 years. The annually compounded interest rate is 10%. How much must you save by the time you retire to support this spending plan?
```{r}
# Simple annuity formula
annuity.level(n=20, pmt=200000, i=.10)
# Continues annuity formula can't be simulated by this package, because the (1+r) -> e^t does not hold
```

## 3-1 Using the Present Value Formula to Value Bonds
The present value of payments by Bonds depends on the opportunity cost of capital $i$. The bond can be valued as a package of an annuity (the coupon payments) and a single,
final payment (the repayment of principal).
```{r}
bond(f=100, r=1, c=100, n=8, i=0.06) %>% round()
```
```{r}
f=1000; r=1; c=1000; n=16; i=0.08; cf=2; ic=1;
eff.i = (1 + i/ic)^(ic) - 1
int = (1 + eff.i)^(1/cf) - 1
r = r/cf
i = seq(0, 2 * int, by = 0.001)
price = f * r * (1 - (1 + int)^(-n))/int + c * (1 + int)^(-n)
```

```{r}
function (f, r, c, n, i, ic = 1, cf = 1, t = NA, plot = FALSE) 
{
    all = list(f, r, c, n, i, ic, cf, t, plot)
    if (any(lapply(all, is.null) == T)) 
        stop("Cannot input any variables as NULL.")
    if (any(lapply(all, length) != 1) == T) 
        stop("All inputs must be of length 1.")
    nalist = list(f, r, c, n, i, ic, cf, plot)
    if (any(lapply(nalist, is.na) == T)) 
        stop("Cannot input any variables except for t as NA.")
    num2 = list(f, r, c, n, i, ic, cf, t)
    na.num2 = num2[which(lapply(num2, is.na) == F)]
    if (any(lapply(na.num2, is.numeric) == F)) 
        stop("f, r, c, n, i, ic, cf, and t must be numeric.")
    stopifnot(is.logical(plot))
    NA.Neg = c(f, c, n, i, ic)
    if (any(NA.Neg <= 0)) 
        stop("All numeric variables must be positive.")
    if (!is.na(t) & (t <= 0 | r < 0)) 
        stop("All numeric variables must be positive.")
    if (any(NA.Neg == Inf)) 
        stop("Cannot input any variables as infinite.")
    if (!is.na(t) & (t == Inf | r == Inf)) 
        stop("Cannot input any variables as infinite.")
    if (n != round(n)) 
        stop("n must be a positive integer.")
    if (!is.na(t) & t > n) 
        stop("t must be less than n.")
    eff.i = (1 + i/ic)^(ic) - 1
    int = (1 + eff.i)^(1/cf) - 1
    full = NA
    clean = NA
    p.d = NA
    p = NA
    prem = NA
    dis = NA
    r = r/cf
    i = seq(0, 2 * int, by = 0.001)
    price = f * r * (1 - (1 + int)^(-n))/int + c * (1 + int)^(-n)
    if (plot == T) 
        price.g = f * r * (1 - (1 + i)^(-n))/i + c * (1 + i)^(-n)
    if (!is.na(t) & t != 0) {
        p = f * r * (1 - (1 + int)^(-(n - t)))/int + c * (1 + 
            int)^(-(n - t))
        if (round(t) != t) {
            p = NA
            d = floor(t)
            k = t - d
            full = (f * r * (1 - (1 + int)^(-(n - d)))/int + 
                c * (1 + int)^(-(n - d))) * (1 + int)^k
            clean = full - k * f * r
        }
    }
    if (!is.na(t) & t != 0) 
        p.d = abs(f * r - c * int)/(1 + int)^(n - t + 1)
    if (plot == T) {
        plot(i, price.g, type = "l", ylab = "Price", xlab = "Yield", 
            main = "Convexity of a Bond")
        abline(h = price, col = "gray", lty = 2)
        abline(v = int, col = "gray", lty = 2)
    }
    n.v = seq(1, n, by = 1)
    macd = (sum(f * r * n.v * (1 + int)^(-n.v)) + c * n * (1 + 
        int)^(-n))/price
    modd = macd/(1 + int)
    macc = (sum(f * r * n.v * n.v/(1 + int)^(n.v)) + c * n * 
        n * (1 + int)^(-n))/price
    modc = (sum(f * r * n.v * (n.v + 1)/(1 + int)^(n.v + 2)) + 
        c * n * (n + 1)/(1 + int)^(n + 2))/price
    if (round(price, 2) > round(c, 2)) 
        prem = price - c
    if (round(price, 2) < round(c, 2)) 
        dis = c - price
    if (cf == 1) {
        years = n
        n = NA
    }
    else years = n/cf
    nom1 = NA
    nom2 = NA
    coupon = f * r
    if (cf != 1) 
        nom1 = ((1 + eff.i)^(1/cf) - 1) * cf
    if (ic != 1 & cf != ic) 
        nom2 = ((1 + eff.i)^(1/ic) - 1) * ic
    if (!is.na(t) & t == 0) 
        t = NA
    out = c(price, prem, dis, coupon, eff.i, nom1, nom2, n, years, 
        macd, modd, macc, modc, t, p, full, clean, p.d)
    out = matrix(out, nrow = length(out))
    rownames(out) = c("Price", "Premium", "Discount", "Coupon", 
        "Eff Rate", paste("i^(", round(cf, 2), ")", sep = ""), 
        paste("i^(", round(ic, 2), ")", sep = ""), "Periods", 
        "Years", "MAC D", "MOD D", "MAC C", "MOD C", paste("At Period ", 
            round(t, 2), ":", sep = ""), "Price(t)", "Full Price", 
        "Clean Price", if (round(price, 2) > round(c, 2)) "Write-Down" else "Write-Up")
    na = apply(out, 1, function(x) all(is.na(x)))
    out = as.matrix(out[!na, ])
    colnames(out) = "Bond Summary"
    return(out)
}
```

